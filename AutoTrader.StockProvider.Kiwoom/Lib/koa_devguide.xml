<?xml version="1.0" encoding="euc-kr" ?>
<KOA_DevGuideList>
    <!-- OpenAPI개발가이드 -->
    <version value="1.57"/>
    <Content name="키움 OpenAPI">
        <subject name="기본설명" type="desc"> <![CDATA[
        [개요]

        OpenAPI(Application Programing Interface)는 
        OpenAPI를 통해 국내주식상품과 코스피200 지수선물/옵션, 주식선물을 거래할 수 있습니다.
        사용자가 직접 거래/분석프로그램을 개발 할 수 있는 서비스이며 COM형태로 제공합니다.
        
        주요기능은 시세데이터 (조회데이터와 실시간데이터), 주문기능, 
        조건검색기능(조회데이터와 실시간데이터)을 제공하며 모두 로그인 이후 가능합니다.
		
        OpenAPI는 보안성과 안정성을 최우선하여 운영되며
        데이터의 가공을 최소화하여 사용자에게 원천데이터를 제공하는 것을 원칙으로 합니다.
		
        OpenAPI에서 발생되는 주문은 영웅문4 HTS, 영웅문S MTS 등 타매체에서도 확인이 가능하며,
        반대로 영웅문4, 영웅문S의 주문에대한 신호가 OpenAPI에서 수신됩니다.
		
        ※ 64비트 버전의 엑셀은 지원하지 않습니다.
		
        ]]> </subject>
        <subject name="기본동작" type="desc"> <![CDATA[
        [기본동작]
        OpenAPI 데이터 요청과 데이터 수신 이벤트는 모두 비동기 방식입니다.
        (반드시 조회요청한 순서대로 수신되지는 않습니다.)
        시세조회나 주문 등 함수호출을 통해 서버로 요청하면 서버의 처리 결과를 그에 맞는 이벤트 발생으로 전달합니다.
        이벤트는 일반함수와 구별하기 위해 "On~" 으로 시작되는 이름을 갖습니다.
        OnEventConnect (로그인처리완료), OnReceiveTRData (조회요청응답), OnReceiveRealData (실시간시세수신)

		
        [데이터요청과 수신]
        예) 조회요청.
        요청(조회함수 CommRqData 사용자가 호출)  --> 이벤트 발생(OnReceiveTRData) --> 데이터 획득(GetCommData 사용자가 호출)
        예) 조건검색요청.
        요청(조회함수 SendCondition 사용자가 호출)  --> 이벤트 발생(OnReceiveTrCondition)
        예) 주문요청.
        요청(주문함수 SendOrder 사용자가 호출)  --> 이벤트 발생(OnReceiveTRData) --> 이벤트 발생 (OnReceiveChejanData) --> 데이터 획득(GetChejanData 사용자가 호출)
		
        ※ 이벤트를 임의로 호출해서 사용하는 것은 불가 합니다.
        
		
        [계좌번호]
        OpenAPI에서는 10자리의 계좌번호가 사용됩니다.
        영웅문4 등에서는 끝 2자리를 고객님께 노출하지 않고 8자릿수로 제공됩니다. 
        OpenAPI에서는 계좌의 끝 2자리를 따로 관리하지 않고
        사용자가 입력한 그대로의 계좌번호를 사용하도록 설계되어 있습니다.
        따라서 데이터 조회 또는 주문시 계좌번호 10자리를 모두 입력해주셔야 합니다.


        [화면번호]
        서버에 데이터를 요청하거나, 주문을 발생시킬때 사용합니다.
        화면번호는 서버의 결과를 수신할때 어떤 요청에 의한 수신인지를 구별하기 위한 키값의 개념입니다.
        0000을 제외한 임의의 숫자(4자리)를 자유롭게 사용하시면 됩니다.
		
        ※ 화면번호 사용시 주의할 점 : 
        같은 화면번호로 데이터 요청을 빠르게 반복하는 경우 데이터의 유효성을 보장할 수 없습니다.
        최소한 2개이상의 화면번호를 번갈아가며 또는 매번 새로운 화면번호를 사용하시기 바랍니다.
        사용자 프로그램에서 사용할 수 있는 화면번호 갯수가 200개로 한정되어 있습니다.
        이 갯수를 넘는 경우 데이터의 유효성을 보장할 수 없습니다.
        (프로그램 성격상 화면번호 갯수가 200개가 넘어야 하는 경우, 이전에 사용되었던 화면번호를 재사용 하는 방식으로 구현해야 합니다.)
		
        ]]> </subject>
        
        <!-- <subject name="시세제공범위" type="desc"> <![CDATA[주식정보, 주식차트 틱,분,시,일,주,월,년, 코스피지수 선물, 코스피지수 옵션]]> </subject> -->
    </Content>
    <Content name="로그인 버전처리">
        <subject name="기본설명" type="desc" > <![CDATA[
        [로그인]
        키움OpenAPI는 로그인창을 통해 접속(로그인) 합니다.
        보안정책 강화로 인해 사용자의 로그인계정을 암호화하기 위해 로그인창이 사용됩니다.
        소스상으로 고객의 비밀번호를 평문으로 입력받지 않도록 설계되었습니다.
        
		
        [로그인 사용법]
        로그인은 CommConnect()함수를 호출합니다. 키움OpenAPI가 제공하는 로그인창이 실행됩니다.
        ID/Pw 입력 후 로그인완료시 OnEventConnect 이벤트가 발생됩니다.
        OnEventConnect 이벤트의 인자값으로 로그인 성공여부를 알수 있습니다.
        이 값이 0이면 성공이고 나머지는 실패로 오류코드값을 수신합니다.
		
        CommConnect(사용자 호출) -> 로그인창 출력 -> OnEventConnect(이벤트 발생)
		
		
        [수동 로그인]
        로그인창에 로그인ID와 비밀번호를 직접 입력해서 로그인 하는것을 말합니다.
        수동 로그인중에 버전처리(최신파일 업데이트)내용이 있는 경우 버전처리도 함께 진행됩니다.
        
		
        [계좌비밀번호 설정]
        OpenAPI는 로그인 후 한번 계좌비밀번호를 입력/등록 해야 합니다.
        계좌비밀번호 설정은 계좌비밀번호 입력창을 통해서만 가능합니다.
        이 입력창을 출력하는 방법은 2가지로 제공됩니다.
        1. 메뉴이용 - 로그인후 윈도우의 작업표시줄상에 깜박이는 트레이아이콘의 
	마우스우측 메뉴(모니터 오른쪽 하단)에서 "계좌비밀번호 저장" 선택
        2. 함수이용 - 로그인후 OpenAPI.KOA_Functions(_T("ShowAccountWindow"), _T("")) 호출
		
        ※ 계좌비밀번호 입력시 주의할 점 : 
        OpenAPI는 계좌비밀번호를 검증하지 않고 입력된 값을 그대로 암호화하여 서버로 전송합니다.
        계좌비밀번호 오류가 일어나지 않도록 오타 등 입력에 주의하시기 바랍니다.
        
		
        [자동 로그인]
        로그인 후에 계좌비밀번호 입력창을 통해 자동로그인을 설정할 수 있습니다.
        계좌비밀번호 입력창에서 계좌비밀번호를 입력하고 "등록" 또는 "전체등록" 버튼을 눌러서 
        비밀번호를 저장한 다음 아래에 있는 "AUTO" 옵션을 체크하면 자동 로그인을 위한 설정이 모두 끝납니다.
        다음번 실행부터 로그인시 로그인창에 계정 입력하는 과정 없이 로그인과정이 자동으로 실행됩니다.
        자동로그인시에는 버전처리(최신파일 업데이트) 과정을 생략합니다.
        단 거래소로부터 수신되는 Daily배치 파일인 종목정보 파일은 자동로그인시에도 다운받습니다.

        ※ 자동로그인 사용시 주의할 점 : 
        정기적으로 일주일에 한번 이상 자동로그인 해지 후 수동로그인으로 버전처리를 받아주시길 권장드립니다.
        버전처리 없이 자동로그인을 계속 사용시에 예기치 않은 오동작의 가능성이 있습니다.
        장종료 후 혹은 주말에도 버전처리는 정상 수행됩니다.

		
        [버전 처리(최신파일 다운로드)]
        OpenAPI의 업데이트가 있는 경우
        로그인할때 버전처리 알림창이 출력 됩니다.
        이 알림창이 표시되면 실행한 OpenAPI프로그램(KOA스튜디오포함)을 
        먼저 모두 종료한다음 알림창에 있는 확인버튼을 눌러야 합니다.
        그렇지 않으면 버전처리가 정상적으로 끝나지 않아서 로그인할때마다 버전처리 알림창이 반복됩니다.
        이렇게 OpenAPI프로그램을 모두 종료한 다음 알림창을 닫아주면 
        버전처리가 자동으로 진행/완료 되고 종료했던 프로그램을 재실행 해주면 됩니다.
        버전처리가 정상적으로 완료된 이후에는 다음번 버전처리가 있을때까지 접속시 해당 알림창이 실행되지 않습니다.

		
        [필수 버전처리 (자동로그인 강제해지)]
        OpenAPI 운영시 사용자가 필수적으로 버전처리를 받아야 하는 업데이트가 있는 경우,
        버전처리를 위해 자동로그인이 강제 해지되는 기능이 작동할 수 있습니다.
        (이때 버전처리완료 후 접속하여 자동로그인을 재설정하실 수 있습니다.)
        자동로그인이 강제해지되는 업데이트는 사용자의 불편함을 줄일 수 있도록 최소화하여 운영됩니다.
		
		
        [모의투자]
        로그인 창에서 모의투자접속에 체크하면 모의투자로 접속하며 이 체크를 풀면 실거래 서버로 접속합니다.
        (KOA Studio 프로그램은 모의투자로만 접속가능합니다. 따라서 모의투자접속 체크 해지가 되지 않습니다.)
        모의투자 접속은 (상시)모의투자 신청 이후에 가능하며 신청여부는 영웅문4 HTS의 모의투자 신청여부와 공유됩니다.
        모의투자 계좌번호, 주문 가능종목, 수수료등 규정은 실거래 시스템과 차이가 있으며 아래 주소에서 확인 가능합니다.
        https://www.kiwoom.co.kr/nkw.templateFrameSet.do?m=m1101020000
        
		
        [중복로그인]
        OpenAPI는 보안정책으로 인해 동일ID에대한 중복로그인을 허용하지 않습니다.
        동일한ID로 중복로그인시에 마지막 로그인한 접속만 유지되고 이전에 로그인한 접속은 단절됩니다.
        모의투자서버 로그인 역시 중복로그인을 허용하지 않습니다.
        (동일한 ID로 실거래서버 로그인과 모의투자로 중복로그인은 가능합니다.)
        동일한ID로 OpenAPI, 영웅문 HTS, MTS 의 중복로그인이 가능합니다.
        동일PC에서 서로다른 ID로 복수실행이 가능합니다. 다만 OpenAPI 실행에 필요한 파일에
        동시에 접근하면서 오동작을 일으킬 수 있습니다. 하나의 PC에서 하나의 실행을 권장합니다.

        ]]> </subject>
        <subject name="관련함수" type="function decs" >
          <function type="funct" id="1" name="LONG CommConnect()" >
          <![CDATA[
          [LONG CommConnect()]
          
          수동 로그인설정인 경우 로그인창을 출력.
          자동로그인 설정인 경우 로그인창에서 자동으로 로그인을 시도합니다.]]>
          </function>
          <function type="funct" id="2" name="void CommTerminate()" >
          <![CDATA[
          [void CommTerminate()]
          
          프로그램 종료없이 서버와의 접속만 단절시키는 함수입니다.
          ※ 함수 사용 후 사용자의 오해소지가 생기는 이유로 더 이상 사용할 수 없는 함수입니다.]]>
          </function>
          <function type="funct" id="15" name="LONG GetConnectState()" >
          <![CDATA[
          [LONG GetConnectState()]
          
          서버와 현재 접속 상태를 알려줍니다.
          리턴값 1:연결, 0:연결안됨
          ]]>
          </function>
          <function type="funct" id="15" name="BSTR GetLoginInfo(BSTR sTag)" >
          <![CDATA[
          [LONG GetLoginInfo()]
          
          로그인 후 사용할 수 있으며 인자값에 대응하는 정보를 얻을 수 있습니다.
          
          인자는 다음값을 사용할 수 있습니다.
          
          "ACCOUNT_CNT" : 보유계좌 갯수를 반환합니다.
          "ACCLIST" 또는 "ACCNO" : 구분자 ';'로 연결된 보유계좌 목록을 반환합니다.
          "USER_ID" : 사용자 ID를 반환합니다.
          "USER_NAME" : 사용자 이름을 반환합니다.
          "GetServerGubun" : 접속서버 구분을 반환합니다.(1 : 모의투자, 나머지 : 실거래서버)
          "KEY_BSECGB" : 키보드 보안 해지여부를 반환합니다.(0 : 정상, 1 : 해지)
          "FIREW_SECGB" : 방화벽 설정여부를 반환합니다.(0 : 미설정, 1 : 설정, 2 : 해지)
          
          리턴값
          인자값에 대응하는 정보를 얻을 수 있습니다.
          ------------------------------------------------------------------------------------------------------------------------------------
          
          [보유계좌 목록 예시]
          
          CString   strAcctList = GetLoginInfo("ACCLIST");
          여기서 strAcctList는 ';'로 분리한 보유계좌 목록임
          예) "3040525910;5678905510;3040526010"
          
          ------------------------------------------------------------------------------------------------------------------------------------
          
          ]]>
          </function>
          <function type="event" id="3" name="void OnEventConnect(long nErrCode)" >
          <![CDATA[
          [OnEventConnect()이벤트]
          
          OnEventConnect(
          long nErrCode   // 로그인 상태를 전달하는데 자세한 내용은 아래 상세내용 참고
          )
          
          로그인 처리 이벤트입니다. 성공이면 인자값 nErrCode가 0이며 에러는 다음과 같은 값이 전달됩니다.
 
          nErrCode별 상세내용
          -100 사용자 정보교환 실패
          -101 서버접속 실패
          -102 버전처리 실패
          ]]>
          </function>
          <function type="event" id="3" name="void OnReceiveMsg(BSTR sScrNo, BSTR sRQName, BSTR sTrCode, BSTR sMsg)" >
          <![CDATA[
          [OnReceiveMsg()이벤트]
          
          OnReceiveMsg(
          BSTR sScrNo,   // 화면번호
          BSTR sRQName,  // 사용자 구분명
          BSTR sTrCode,  // TR이름
          BSTR sMsg     // 서버에서 전달하는 메시지
          )
          
          데이터 요청 또는 주문전송 후에 서버가 보낸 메시지를 수신합니다.
          예) "조회가 완료되었습니다" 
          예) "계좌번호 입력을 확인해주세요" 
          예) "조회할 자료가 없습니다." 
          예) "증거금 부족으로 주문이 거부되었습니다."
		  
          ※ 주의할 점 : 
          메시지에 포함된 6자리 코드번호는 변경될 수 있으니, 여기에 수신된 코드번호를 특정 용도로 사용하지 마시기 바랍니다.
          ]]>
          </function>
        </subject>
        <!-- // 우선 막아둔다.
      <subject type="code" name="C++"> <![CDATA[로그인 버전처리 C++코드]]> </subject>
      <subject type="code" name="C#"> <![CDATA[로그인 버전처리 C#코드]]> </subject>
      <subject type="code" name="VB"> <![CDATA[로그인 버전처리 VB코드]]> </subject>
      -->
    </Content>
    <Content name="조회와 실시간데이터처리">
      <subject name="기본설명" type="desc"> <![CDATA[
      [조회처리(조회요청)]
      OpenAPI가 제공하는 데이터중에서 원하는 데이터를 서버에 요청해서 수신 받는 것을 말합니다.
      이는 하나의 TR(Transaction)단위로 처리됩니다.
      각 TR은 서버와 데이터를 주고받을때 약속된 규약입니다. 
      각각의 TR은 입력부분(Input)과 출력부분(Output)을 가지고 있습니다.
      Input은 사용하는 TR에따라 항목이 달라지며 사용자(고객)가 입력해야 하는 부분이고,
      Output은 요청에대한 서버의 응답으로 수신되는 데이터 입니다.
      Output은 여러항목으로 제공되며 필요한 항목의 값만을 골라서 얻을 수 있습니다.
      
      출력부분은 항목이 하나로 전달되는 싱글데이터와 복수의 건수로 전달되는 멀티데이터가 있습니다.
      TR에 따라 싱글데이터(또는 멀티데이터)만 있거나 둘다 있는 경우도 있습니다.
      OPT10070 : 당일주요거래원요청 - 싱글데이터
      OPT10081 : 주식일봉차트조회요청 - 싱글 + 멀티데이터
	  
      OpenAPI가 제공하는 TR들은 KOA Studio의 "TR목록" 탭에서 찾아볼 수 있습니다.
      이중 필요한 TR을 선택하여 약속된 Input값을 입력 후 서버에 요청하면
      해당 TR에 정의되어 있는 Output 항목들의 값을 구할 수 있습니다.
      
      ※ 주의할 점 : 
      조회시 입력값 항목들은 SetInputValue 함수로 반드시 순서에 맞게 입력해야 합니다.
      계좌비밀번호는 별도의 입력창으로 입력/등록하고 조회시에는 공백으로 입력합니다.
          ex) SetInputValue("비밀번호"	,  ""); 
	  
	  
      [조회요청/수신 사용법]
      조회요청하고자 하는 TR의 입력값(input)을 셋팅한뒤 조회요청을 합니다.
      서버는 요청에대한 결과를 보내주고 이벤트를 발생시켜 데이터를 수신합니다.
      수신한 데이터중 필요한 항목에 해당하는 값을 구합니다.
		
      SetInputValue(사용자 호출) -> CommRqData(사용자 호출) -> OnReceiveTrData(이벤트 발생)
		
		
      [연속조회]
      TR별로 한번에 전달할 수 있는 데이터 갯수가 정해져 있습니다. 
      이 갯수보다 조회할 데이터가 많을때는 연속조회로 모든 데이터를 조회할 수 있습니다.
      연속조회는 CommRqData()에서 인자값만 바꿔서 다시 요청합니다.

      CommRqData("일별데이터조회", "OPT10086" , 0, "0001");      
      위처럼 요청한 데이터가 한번에 수신된 데이터보다 더 많이 있다면
      OnReceiveTRData()이벤트에서 5번째 인자값(sPrevNext)에 "2"가 전달됩니다.
      이때 더 많은 데이터를 요청하고자 할때는
      CommRqData("일별데이터조회", "OPT10086" , 2, "0001"); 
      위처럼 3번째 인자값을 2로 설정해서 조회하시면 됩니다.
      정리하면 다음과 같습니다.
      OpenAPI.CommRqData("일별데이터조회", "OPT10086" , 0, "0001"); // 처음조회시 혹은 연속데이터가 없을때
      OpenAPI.CommRqData("일별데이터조회", "OPT10086" , 2, "0001"); // 연속조회시 (필요에따라 요청)
	  
      ※ 주의할 점 : 
      중간에 다른 TR 요청이 있는 경우 연속조회가 되지 않습니다.
      
	  
      [실시간 데이터]
      시세조회요청이 성공하면 해당종목의 실시간시세 데이터가 서버에 자동으로 등록됩니다.
      이후 해당종목의 실시간 시세데이터는 OnReceiveRealData() 이벤트로 수신됩니다.
      또는 시세조회가 필요없고 실시간시세만 필요한 경우는 
      SetRealReg 함수를 사용하여 특정종목(복수종목 가능)의 실시간시세를 서버에 등록할 수 있습니다.
	  
      ※ SetRealReg() 함수는 조건검색 항목에서 사용법을 설명하고 있습니다.
	  
      KOA Studio의 실시간 탭을 여시면 Real Type (실시간타입) 목록을 확인할 수 있습니다.
      이들 하나하나를 실시간 타입이라고 합니다.
      각 실시간타입에 포함되는 데이터항목들의 FID(Feild ID)들이 그룹핑되어 있습니다.
      예를들어 실시간 타입 "주식시세"는 FID 10 현재가 ~ FID 568 하한가발생시간까지 FID로 구성되며 한꺼번에 전달됩니다.
      또 실시간 타입 "주식체결"는 FID 20 체결시간 ~ FID 1313 Extra Item까지 FID가 한번에 전달됩니다.
      
	  
      [실시간시세 사용법]
      시세관련 TR서비스를 요청하는 경우 자동으로 서버에 해당 종목의 실시간시세가 등록 됩니다.
      시세관련 TR서비스 조회요청이 불필요한 경우 SetRealReg 함수를 통해 조회없이 실시간시세 등록이 가능합니다.
		
      방법1. 조회 서비스 이용
      SetInputValue(사용자 호출) -> CommRqData(사용자 호출) -> OnReceiveTrData(이벤트 발생) ->OnReceiveRealData(이벤트 발생)
      방법2. SetRealReg 함수 이용
      SetRealReg(사용자 호출) -> OnReceiveRealData(이벤트 발생)


      [주문관련 실시간 데이터]
      실시간 타입 "주문체결", "잔고", "파생잔고"는 주문관련 실시간 데이터를 전달합니다.
      데이터요청이나 서버등록 필요없이 주문발생시 수신되는 실시간타입 입니다.
      실시간시세와는 다르게 조회요청이나 SetRealReg() 함수로 등록해서 사용할 수 없습니다.
      수신 이벤트는 OnReceiveChejanData() 입니다.
      영웅문4 HTS, 영웅문S MTS 를 통한 주문들도 동일ID로 접속한 경우 OpenAPI로 수신됩니다.

	  
      아래 실시간 타입은 시스템 내부용으로, 사용자가 사용할수 없는 실시간 타입입니다.
      1. 임의연장정보
      2. 시간외종목정보
      3. 주식거래원
      4. 순간체결량
      5. 선물옵션합계
      6. 투자자별매매
	  
	  
      ]]> </subject>
      <subject name="관련함수" type="function decs" >
          <function type="funct" id="3" name="LONG CommRqData(BSTR sRQName, BSTR sTrCode, long nPrevNext, BSTR sScreenNo)">
          <![CDATA[
          [CommRqData() 함수]
          
          CommRqData(
          BSTR sRQName,    // 사용자 구분명 (임의로 지정, 한글지원)
          BSTR sTrCode,    // 조회하려는 TR이름
          long nPrevNext,  // 연속조회여부
          BSTR sScreenNo  // 화면번호 (4자리 숫자 임의로 지정)
          )
          
          조회요청 함수입니다.
          리턴값 0이면 조회요청 정상 나머지는 에러
		  
          예)
          -200 시세과부하
          -201 조회전문작성 에러
          
          
          ]]>
          </function>
          <function type="funct" id="7" name="void SetInputValue(BSTR sID, BSTR sValue)">
          <![CDATA[
          [SetInputValue() 함수]
          
          SetInputValue(
          BSTR sID,     // TR에 명시된 Input이름
          BSTR sValue   // Input이름으로 지정한 값
          )
          
          조회요청시 TR의 Input값을 지정하는 함수입니다.
          CommRqData 호출 전에 입력값들을 셋팅합니다.
          각 TR마다 Input 항목이 다릅니다. 순서에 맞게 Input 값들을 셋팅해야 합니다.
          
          ------------------------------------------------------------------------------------------------------------------------------------
          
          예)
          [OPT10081 : 주식일봉차트조회요청예시]
          
          SetInputValue("종목코드"	,  "039490"); // 첫번째 입력값 설정
          SetInputValue("기준일자"	,  "20160101");// 두번째 입력값 설정
          SetInputValue("수정주가구분"	,  "1"); // 세번째 입력값 설정
          LONG lRet = CommRqData( "RQName","OPT10081", "0","0600");// 조회요청
          
          ------------------------------------------------------------------------------------------------------------------------------------
          ]]>
          </function>
          <function type="funct" id="9" name="BSTR CommGetData(BSTR sJongmokCode, BSTR sRealType, BSTR sFieldName, long nIndex, BSTR sInnerFieldName)">
          <![CDATA[
          [CommGetData() 함수]
          
          일부 TR에서 사용상 제약이 있음므로 이 함수 대신 GetCommData()함수를 사용하시기 바랍니다.
          ]]>
          </function>
          <function type="funct" id="10" name="void DisconnectRealData(BSTR sScnNo)" >
          <![CDATA[
          [DisconnectRealData() 함수]
          
          DisconnectRealData(
          BSTR sScnNo // 화면번호 
          )
          
          시세데이터를 요청할때 사용된 화면번호를 이용하여 
          해당 화면번호로 등록되어져 있는 종목의 실시간시세를 서버에 등록해지 요청합니다.
          이후 해당 종목의 실시간시세는 수신되지 않습니다.
          단, 해당 종목이 또다른 화면번호로 실시간 등록되어 있는 경우 해당종목에대한 실시간시세 데이터는 계속 수신됩니다.
          ]]>
          </function>
          <function type="funct" id="11" name="LONG GetRepeatCnt(BSTR sTrCode, BSTR sRecordName)" >
          <![CDATA[
          [GetRepeatCnt() 함수]
          
          GetRepeatCnt(
          BSTR sTrCode, // TR 이름
          BSTR sRecordName // 레코드 이름
          )
          
          데이터 수신시 멀티데이터의 갯수(반복수)를 얻을수 있습니다. 
          예를들어 차트조회는 한번에 최대 900개 데이터를 수신할 수 있는데 
          이렇게 수신한 데이터갯수를 얻을때 사용합니다.
          이 함수는 OnReceiveTRData()이벤트가 발생될때 그 안에서 사용해야 합니다.
          
          ------------------------------------------------------------------------------------------------------------------------------------
          
          예)
          [OPT10081 : 주식일봉차트조회요청예시]
          
          OnReceiveTrData(...)
          {
            if(strRQName == _T("주식일봉차트"))
            {
              int nCnt = OpenAPI.GetRepeatCnt(sTrcode, strRQName);		// 데이터 반복건수 구함
              for (int nIdx = 0; nIdx < nCnt; nIdx++)
              {
                strData = OpenAPI.GetCommData(sTrcode, strRQName, nIdx, _T("거래량"));   strData.Trim();
                strData = OpenAPI.GetCommData(sTrcode, strRQName, nIdx, _T("시가"));   strData.Trim();
                strData = OpenAPI.GetCommData(sTrcode, strRQName, nIdx, _T("고가"));   strData.Trim();
                strData = OpenAPI.GetCommData(sTrcode, strRQName, nIdx, _T("저가"));   strData.Trim();
                strData = OpenAPI.GetCommData(sTrcode, strRQName, nIdx, _T("현재가"));   strData.Trim();
              }
            }
          }
          
          ------------------------------------------------------------------------------------------------------------------------------------
          ]]>
          </function>
          <function type="funct" id="12" name="LONG CommKwRqData(BSTR sArrCode, BOOL bNext, int nCodeCount, int nTypeFlag, BSTR sRQName, BSTR sScreenNo)" >
          <![CDATA[
          [CommKwRqData() 함수]
          
          CommKwRqData(
          BSTR sArrCode,    // 조회하려는 종목코드 리스트
          BOOL bNext,   // 연속조회 여부 0:기본값, 1:연속조회(지원안함)
          int nCodeCount,   // 종목코드 갯수
          int nTypeFlag,    // 0:주식 종목, 3:선물옵션 종목
          BSTR sRQName,   // 사용자 구분명
          BSTR sScreenNo    // 화면번호
          )
          
          한번에 100종목까지 조회할 수 있는 복수종목 조회함수 입니다.
          함수인자로 사용하는 종목코드 리스트는 조회하려는 종목코드 사이에 구분자';'를 추가해서 만들면 됩니다.
          수신되는 데이터는 TR목록에서 복수종목정보요청(OPTKWFID) Output을 참고하시면 됩니다.
          ※ OPTKWFID TR은 CommKwRqData()함수 전용으로, CommRqData 로는 사용할 수 없습니다.
          ※ OPTKWFID TR은 영웅문4 HTS의 관심종목과는 무관합니다.
          ]]>
          </function>
          <function type="funct" id="24" name="BSTR GetCommData(BSTR strTrCode, BSTR strRecordName, long nIndex, BSTR strItemName)" >
          <![CDATA[
          [GetCommData() 함수]
          
          GetCommData(
          BSTR strTrCode,   // TR 이름
          BSTR strRecordName,   // 레코드이름
          long nIndex,      // nIndex번째
          BSTR strItemName) // TR에서 얻어오려는 출력항목이름
          
          OnReceiveTRData()이벤트가 발생될때 수신한 데이터를 얻어오는 함수입니다.
          이 함수는 OnReceiveTRData()이벤트가 발생될때 그 안에서 사용해야 합니다.
          
          ------------------------------------------------------------------------------------------------------------------------------------
          
          예)
          [OPT10081 : 주식일봉차트조회요청예시]
          
          OnReceiveTrData(...)
          {
            if(strRQName == _T("주식일봉차트"))
            {
              int nCnt = OpenAPI.GetRepeatCnt(sTrcode, strRQName);
              for (int nIdx = 0; nIdx < nCnt; nIdx++)
              {
                strData = OpenAPI.GetCommData(sTrcode, strRQName, nIdx, _T("거래량"));   strData.Trim();	// nIdx번째의 거래량 데이터 구함
                strData = OpenAPI.GetCommData(sTrcode, strRQName, nIdx, _T("시가"));   strData.Trim();
                strData = OpenAPI.GetCommData(sTrcode, strRQName, nIdx, _T("고가"));   strData.Trim();
                strData = OpenAPI.GetCommData(sTrcode, strRQName, nIdx, _T("저가"));   strData.Trim();
                strData = OpenAPI.GetCommData(sTrcode, strRQName, nIdx, _T("현재가"));   strData.Trim();
              }
            }
          }
          
          ------------------------------------------------------------------------------------------------------------------------------------
          ]]>
          </function>
          <function type="funct" id="25" name="BSTR GetCommRealData(BSTR strCode, long nFid)" >
          <![CDATA[
          [GetCommRealData() 함수]
          
          GetCommRealData(
          BSTR strCode,   // 종목코드
          long nFid   // 실시간 타입에 포함된FID (Feild ID)
          )
          
          실시간시세 데이터 수신 이벤트인 OnReceiveRealData() 가 발생될때 실시간데이터를 얻어오는 함수입니다.
          이 함수는 OnReceiveRealData()이벤트가 발생될때 그 안에서 사용해야 합니다.
          FID 값은 "실시간목록"에서 확인할 수 있습니다.
          
          ------------------------------------------------------------------------------------------------------------------------------------
          
          예)
          [주식체결 실시간 데이터 예시]
          
          if(strRealType == _T("주식체결"))	// OnReceiveRealData 이벤트로 수신된 실시간타입이 "주식체결" 이면
          {
            strRealData = OpenAPI.GetCommRealData(strCode, 10);   // 현재가
            strRealData = OpenAPI.GetCommRealData(strCode, 13);   // 누적거래량
            strRealData = OpenAPI.GetCommRealData(strCode, 228);    // 체결강도
            strRealData = OpenAPI.GetCommRealData(strCode, 20);  // 체결시간
          }
          
          ------------------------------------------------------------------------------------------------------------------------------------
          ]]>
          </function>
          <function type="funct" id="56" name="VARIANT GetCommDataEx(BSTR strTrCode, BSTR strRecordName)" >
          <![CDATA[
          [GetCommDataEx() 함수]
          
          GetCommDataEx(
          BSTR strTrCode,   // TR 이름
          BSTR strRecordName  // 레코드이름
          )
          
          조회 수신데이터 크기가 큰 차트데이터를 한번에 가져올 목적으로 만든 차트조회 전용함수입니다.
          
          ------------------------------------------------------------------------------------------------------------------------------------
          
          예)
          [차트일봉데이터 예시]
          
          OnReceiveTrDataKhopenapictrl(...)
          {
            if(strRQName == _T("주식일봉차트"))
            {
              VARIANT   vTemp = OpenAPI.GetCommDataEx(strTrCode, strRQName);
              long	lURows, lUCols;
              long	nIndex[2]
              COleSafeArray saMatrix(vTemp);
              VARIANT vDummy;
              VariantInit(&vDummy);
              saMatrix.GetUBound(1, &lURows); // 데이터 전체갯수(데이터 반복횟수)
              saMatrix.GetUBound(2, &lUCols); // 출력항목갯수

              for(int nRow = 0; nRow <= lURows; nRow ++)
              {
                for(int nCol = 0; nCol <= lUCols; nCol ++)
                {
                  nIndex[0] = lURows;
                  nIndex[1] = lUCols;
                  saMatrix.GetElement(nIndex, &vDummy);
                  ::SysFreeString(vDummy.bstrVal);
                }
              }
              saMatrix.Clear();
              VariantClear(&vTemp);
            }
          }
          
          ------------------------------------------------------------------------------------------------------------------------------------
          
          ]]>
          </function>
          <function type="event" id="1" name="void OnReceiveTrData(BSTR sScrNo, BSTR sRQName, BSTR sTrCode, BSTR sRecordName, BSTR sPrevNext, LONG nDataLength, BSTR sErrorCode, BSTR sMessage, BSTR sSplmMsg)" >
          <![CDATA[
          [OnReceiveTrData() 이벤트]
          
          void OnReceiveTrData(
          BSTR sScrNo,       // 화면번호
          BSTR sRQName,      // 사용자 구분명
          BSTR sTrCode,      // TR이름
          BSTR sRecordName,  // 레코드 이름
          BSTR sPrevNext,    // 연속조회 유무를 판단하는 값 0: 연속(추가조회)데이터 없음, 2:연속(추가조회) 데이터 있음
          LONG nDataLength,  // 사용안함.
          BSTR sErrorCode,   // 사용안함.
          BSTR sMessage,     // 사용안함.
          BSTR sSplmMsg     // 사용안함.
          )
          
          요청했던 조회데이터를 수신했을때 발생됩니다.
          수신된 데이터는 이 이벤트내부에서 GetCommData()함수를 이용해서 얻어올 수 있습니다.
          
          ]]>
          </function>
          <function type="event" id="2" name="void OnReceiveRealData(BSTR sCode, BSTR sRealType, BSTR sRealData)" >
          <![CDATA[
          [OnReceiveRealData()이벤트]
          
          OnReceiveRealData(
          BSTR sCode,        // 종목코드
          BSTR sRealType,    // 실시간타입
          BSTR sRealData    // 실시간 데이터 전문 (사용불가)
          )
          
          실시간시세 데이터가 수신될때마다 종목단위로 발생됩니다.
          SetRealReg()함수로 등록한 실시간 데이터도 이 이벤트로 전달됩니다.
          GetCommRealData()함수를 이용해서 수신된 데이터를 얻을수 있습니다.
          
          ]]>
          </function>
          <function type="event" id="3" name="void OnReceiveMsg(BSTR sScrNo, BSTR sRQName, BSTR sTrCode, BSTR sMsg)" >
          <![CDATA[
          [OnReceiveMsg()이벤트]
          
          OnReceiveMsg(
          BSTR sScrNo,   // 화면번호
          BSTR sRQName,  // 사용자 구분명
          BSTR sTrCode,  // TR이름
          BSTR sMsg     // 서버에서 전달하는 메시지
          )
          
          주문전송 또는 데이터 조회요청 후 서버 메시지가 수신됩니다.
          ※ 메시지에 포함된 6자리 코드번호는 변경될 수 있으니, 여기에 수신된 코드번호를 특정 용도로 사용하지 마시기 바랍니다.
		  
          예) 
          "조회가 완료되었습니다."
          "증거금 부족으로 주문이 거부되었습니다."
          "정정할 원주문 내역이 없습니다."
          "비밀번호 입력을 확인해주시기 바랍니다."
		  
          ]]>
          </function>
      </subject>
      <!-- // 우선 막아둔다.
      <subject type="code" name="C++"><![CDATA[조회처리 C++]]> </subject>
      <subject type="code" name="C#"><![CDATA[조회처리 C#]]> </subject>
      <subject type="code" name="VB"><![CDATA[조회처리 VB]]> </subject>
      -->
    </Content>
    <Content name="주문과 잔고처리">
        <subject name="기본설명" type="desc"> <![CDATA[
        [개요]
        OpenAPI를 이용하면 국내주식과 코스피200 지수선물/옵션, 주식선물을 거래할 수 있습니다.
        상품별로 전용 주문함수가 있으며 SendOrderCredit()함수를 이용해서 대주를 제외한 신용주문을 지원합니다.
        ※ 정정주문은 원주문에 대한 가격정정만 가능하며 거래구분을 변경하는 정정주문은 지원하지 않습니다.
        
		
        [계좌비밀번호 설정]
        OpenAPI는 로그인 후 한번 계좌비밀번호를 입력/등록 해야 합니다.
        계좌비밀번호 설정은 계좌비밀번호 입력창에서만 가능합니다.
        이 입력창을 출력하는 방법은 2가지로 제공됩니다.
        1. 메뉴이용 - 로그인후 윈도우의 작업표시줄상에 깜박이는 트레이아이콘의 
	마우스우측 메뉴(모니터 오른쪽 하단)에서 "계좌비밀번호 저장" 선택
        2. 함수이용 - 로그인후 OpenAPI.KOA_Functions(_T("ShowAccountWindow"), _T("")) 호출
        ※ 계좌비밀번호 입력시 주의할 점 : 
        OpenAPI는 계좌비밀번호를 검증하지 않고 입력된 값을 그대로 암호화하여 서버로 전송합니다.
        계좌비밀번호 오류가 일어나지 않도록 오타 등 입력에 주의하시기 바랍니다.

        
        [주문처리단계]
        주문 처리 순서
        SendOrder(주문발생) -> OnReceiveTRData(주문응답) -> OnReceiveMsg(주문메세지수신) -> OnReceiveChejan(주문접수/체결)
        ※ 주의(역전현상) : 주문건수가 폭증하는 경우 OnReceiveChejan 이벤트가 OnReceiveTRData 이벤트보다 앞서 수신될 수 있습니다.
        
        각 단계 설명
        SendOrder - 사용자가 호출. 리턴값 0인 경우 정상
        OnReceiveTRData - 주문발생시 첫번째 서버응답. 주문번호 취득 (주문번호가 없다면 주문거부 등 비정상주문)
        OnReceiveMsg - 주문거부 사유를 포함한 서버메세지 수신
        OnReceiveChejan - 주문 상태에따른 실시간수신 (주문접수, 주문체결, 잔고변경 각 단계별로 수신됨)
		
        OnReceiveTRData()이벤트는 주로 조회요청후 데이터수신 이벤트지만 주문시에도 발생됩니다.
        주문이 정상인 경우 이 이벤트내부에서 주문번호를 얻을 수 있습니다.
        비정상주문인 경우 주문번호는 공백("")으로 전달됩니다.
        각 주문함수의 리턴값이 0(성공)이여도 장 개시전 주문, 시장가 주문가격입력, 호가범위를 벗어난 주문등 
        다양한 원인으로 주문은 실패할수 있습니다.

        
        [주문 유의사항]
        ※ 주문은 1초당 5회로 제한 됩니다. (조회횟수와는 별개로 카운트 됩니다.)
        ※ 주문가능수량 이상으로 주문하는 경우 미수주문으로 처리될 수 있습니다.
              영웅문4 [0398] 화면등에서 계좌증거금 변경등록으로 100% 현금 주문만 가능하도록 설정할 수 있습니다.
        ※ 시장가주문시 최대주문가능수량은 상한가를 기준으로 계산됩니다.
        ※ 시장가주문시 주문가격은 0으로 입력합니다.
        ※ OpenAPI에서는 거래구분 정정주문은 지원되지 않습니다. 
              예) 지정가 매도 -> 시장가 매도로 정정 (불가. 원주문 취소 후 신규주문으로 진행하시기 바랍니다.)
        ※ 주문내역은 영웅문HTS, MTS 등 매체간 공유됩니다.
              타매체에서 발생시킨 주문체결도 OnReceiveChejan 이벤트로 실시간 수신됩니다.
        ※ 모의투자 서버에서는 주문 불가 종목이 존재합니다.
              모의투자 규정을 확인해주시기 바랍니다.
              https://www.kiwoom.co.kr/nkw.templateFrameSet.do?m=m1101020000
        
		
        [주문체결, 잔고 수신]
        OnReceiveChejan()이벤트는 주문접수, 체결, 잔고변경시 발생됩니다.
        이 이벤트를 통해 대부분의 주문관련 정보를 얻을 수 있습니다.
        주문요청에 대한 응답은 주문접수, 주문체결, 잔고수신 순서로 진행됩니다.
        (정정/취소 주문의 경우 주문접수 후에 주문확인 신호가 한번 더 수신됩니다.)
        하나의 주문에대해 부분체결되는 경우 아래와 같은 순서로 OnReceiveChejan 이벤트가 발생됩니다.
        
        주문 ---> 접수 ---> 체결1 ---> 잔고1  ---> 체결2  ---> 잔고2... ---> 체결n  ---> 잔고n
        
        주문 응답의 구분은 OnReceiveChejanData()이벤트가 발생될때 전달되는 sGubun값을 이용합니다. 
        sGubun값은 접수와 체결시 '0'값, 잔고변경은 '1'값을 가지게 됩니다. 
        이값에 따라 실시간타입 "주문체결" 또는 "잔고" 타입이 사용됩니다.
        
		
        [OnReceiveChejan()이벤트로 전달되는 FID목록정리]
        
        "9201" : "계좌번호" 
        "9203" : "주문번호" 
        "9001" : "종목코드" 
        "913" : "주문상태" 
        "302" : "종목명" 
        "900" : "주문수량" 
        "901" : "주문가격" 
        "902" : "미체결수량" 
        "903" : "체결누계금액" 
        "904" : "원주문번호" 
        "905" : "주문구분" 
        "906" : "매매구분" 
        "907" : "매도수구분" 
        "908" : "주문/체결시간" 
        "909" : "체결번호" 
        "910" : "체결가" 
        "911" : "체결량" 
        "10" : "현재가" 
        "27" : "(최우선)매도호가" 
        "28" : "(최우선)매수호가" 
        "914" : "단위체결가" 
        "915" : "단위체결량" 
        "919" : "거부사유" 
        "920" : "화면번호" 
        "917" : "신용구분" 
        "916" : "대출일" 
        "930" : "보유수량" 
        "931" : "매입단가" 
        "932" : "총매입가" 
        "933" : "주문가능수량" 
        "945" : "당일순매수수량" 
        "946" : "매도/매수구분" 
        "950" : "당일총매도손일" 
        "951" : "예수금"  (지원안함)
        "307" : "기준가" 
        "8019" : "손익율" 
        "957" : "신용금액" 
        "958" : "신용이자" 
        "918" : "만기일" 
        "990" : "당일실현손익(유가)" 
        "991" : "당일실현손익률(유가)" 
        "992" : "당일실현손익(신용)" 
        "993" : "당일실현손익률(신용)" 
        "397" : "파생상품거래단위" 
        "305" : "상한가" 
        "306" : "하한가"
		
        ]]> </subject>
        <subject name="관련함수" type="function decs" >
          <function type="funct" id="5" name="LONG SendOrder( BSTR sRQName, BSTR sScreenNo, BSTR sAccNo, LONG nOrderType,	BSTR sCode, LONG nQty, LONG nPrice, BSTR sHogaGb, BSTR sOrgOrderNo )">
          <![CDATA[
          [SendOrder() 함수]
          
          SendOrder(
          BSTR sRQName, // 사용자 구분명
          BSTR sScreenNo, // 화면번호
          BSTR sAccNo,  // 계좌번호 10자리
          LONG nOrderType,  // 주문유형 1:신규매수, 2:신규매도 3:매수취소, 4:매도취소, 5:매수정정, 6:매도정정
          BSTR sCode, // 종목코드 (6자리)
          LONG nQty,  // 주문수량
          LONG nPrice, // 주문가격
          BSTR sHogaGb,   // 거래구분(혹은 호가구분)은 아래 참고
          BSTR sOrgOrderNo  // 원주문번호. 신규주문에는 공백 입력, 정정/취소시 입력합니다.
          )
          
          서버에 주문을 전송하는 함수 입니다.
          9개 인자값을 가진 주식주문 함수이며 리턴값이 0이면 성공이며 나머지는 에러입니다.
          1초에 5회만 주문가능하며 그 이상 주문요청하면 에러 -308을 리턴합니다.
          ※ 시장가주문시 주문가격은 0으로 입력합니다.
          ※ 취소주문일때 주문가격은 0으로 입력합니다.
          
          [거래구분]
          00 : 지정가
          03 : 시장가
          05 : 조건부지정가
          06 : 최유리지정가
          07 : 최우선지정가
          10 : 지정가IOC
          13 : 시장가IOC
          16 : 최유리IOC
          20 : 지정가FOK
          23 : 시장가FOK
          26 : 최유리FOK
          61 : 장전시간외종가
          62 : 시간외단일가매매
          81 : 장후시간외종가
          ※ 모의투자에서는 지정가 주문과 시장가 주문만 가능합니다.
          
          [정규장 외 주문]
          장전 동시호가 주문
              08:30 ~ 09:00.	거래구분 00:지정가/03:시장가 (일반주문처럼)
              ※ 08:20 ~ 08:30 시간의 주문은 키움에서 대기하여 08:30 에 순서대로 거래소로 전송합니다.
          장전시간외 종가
              08:30 ~ 08:40. 	거래구분 61:장전시간외종가.  가격 0입력
              ※ 전일 종가로 거래. 미체결시 자동취소되지 않음
          장마감 동시호가 주문
              15:20 ~ 15:30.	거래구분 00:지정가/03:시장가 (일반주문처럼)
          장후 시간외 종가
              15:40 ~ 16:00.	거래구분 81:장후시간외종가.  가격 0입력
              ※ 당일 종가로 거래
          시간외 단일가
              16:00 ~ 18:00.	거래구분 62:시간외단일가.  가격 입력
              ※ 10분 단위로 체결, 당일 종가대비 +-10% 가격으로 거래

          ]]>
          </function>
          <function type="funct" id="6" name="LONG SendOrderFO(BSTR sRQName, BSTR sScreenNo, BSTR sAccNo, BSTR sCode, LONG lOrdKind, BSTR sSlbyTp, BSTR sOrdTp, LONG lQty, BSTR sPrice, BSTR sOrgOrdNo)" >
          <![CDATA[
          [SendOrderFO() 함수]
          
          SendOrderFO(
          BSTR sRQName,     // 사용자 구분명
          BSTR sScreenNo,   // 화면번호
          BSTR sAccNo,      // 계좌번호 10자리 
          BSTR sCode,       // 종목코드 
          LONG lOrdKind,    // 주문종류 1:신규매매, 2:정정, 3:취소
          BSTR sSlbyTp,     // 매매구분	1: 매도, 2:매수
          BSTR sOrdTp,      // 거래구분(혹은 호가구분)은 아래 참고
          LONG lQty,        // 주문수량 
          BSTR sPrice,      // 주문가격 
          BSTR sOrgOrdNo    // 원주문번호
          )
          
          서버에 주문을 전송하는 함수 입니다.
          코스피지수200 선물옵션, 주식선물 전용 주문함수입니다.
          
          [거래구분]
          1 : 지정가
          2 : 조건부지정가
          3 : 시장가
          4 : 최유리지정가
          5 : 지정가(IOC)
          6 : 지정가(FOK)
          7 : 시장가(IOC)
          8 : 시장가(FOK)
          9 : 최유리지정가(IOC)
          A : 최유리지정가(FOK)
          장종료 후 시간외 주문은 지정가 선택
          ]]>
          </function>
          <function type="funct" id="48" name="LONG SendOrderCredit(BSTR sRQName, BSTR sScreenNo, BSTR sAccNo, LONG nOrderType, BSTR sCode, LONG nQty, LONG nPrice, BSTR sHogaGb, BSTR sCreditGb, BSTR sLoanDate, BSTR sOrgOrderNo)" >
          <![CDATA[
          [SendOrderCredit() 함수]
          
          SendOrderCredit(
          BSTR sRQName,   // 사용자 구분명
          BSTR sScreenNo,   // 화면번호 
          BSTR sAccNo,    // 계좌번호 10자리 
          LONG nOrderType,    // 주문유형 1:신규매수, 2:신규매도 3:매수취소, 4:매도취소, 5:매수정정, 6:매도정정
          BSTR sCode,   // 종목코드
          LONG nQty,    // 주문수량
          LONG nPrice,    // 주문가격
          BSTR sHogaGb,   // 거래구분(혹은 호가구분)은 아래 참고
          BSTR sCreditGb, // 신용거래구분 (아래에서 참고)
          BSTR sLoanDate,   // 대출일 (YYYYMMDD. 아래에서 참고)
          BSTR sOrgOrderNo    // 원주문번호
          )
          
          서버에 주문을 전송하는 함수 입니다.
          국내주식 신용주문 전용함수입니다. 대주거래는 지원하지 않습니다.

          [거래구분]
          00 : 지정가
          03 : 시장가
          05 : 조건부지정가
          06 : 최유리지정가
          07 : 최우선지정가
          10 : 지정가IOC
          13 : 시장가IOC
          16 : 최유리IOC
          20 : 지정가FOK
          23 : 시장가FOK
          26 : 최유리FOK
          61 : 장전시간외종가
          62 : 시간외단일가매매
          81 : 장후시간외종가
          ※ 모의투자에서는 지정가 주문과 시장가 주문만 가능합니다.
          
          [신용거래]
          신용거래 구분은 다음과 같습니다.
          03 : 신용매수 - 자기융자
          33 : 신용매도 - 자기융자
          99 : 신용매도 자기융자 합
          
          대출일은 YYYYMMDD형식입니다.
          신용매도 - 자기융자 일때는 종목별 대출일을 입력하고 신용매도 - 융자합이면 "99991231"을 입력합니다.
          ]]>
          </function>
          <function type="funct" id="26" name="BSTR GetChejanData(long nFid)" >
          <![CDATA[
          [GetChejanData() 함수]
          
          GetChejanData(
          long nFid   // 실시간 타입에 포함된 FID(Field ID)
          )
          
          OnReceiveChejan()이벤트가 발생될때 FID에 해당되는 값을 구하는 함수입니다.
          이 함수는 OnReceiveChejan() 이벤트 안에서 사용해야 합니다.
          예) 체결가 = GetChejanData(910) 
          ]]>
          </function>
          <function type="event" id="4" name="void OnReceiveChejanData(BSTR sGubun, LONG nItemCnt, BSTR sFIdList)" >
          <![CDATA[
          [OnReceiveChejanData() 이벤트]
          
          OnReceiveChejanData(
          BSTR sGubun, // 체결구분. 접수와 체결시 '0'값, 국내주식 잔고변경은 '1'값, 파생잔고변경은 '4'
          LONG nItemCnt,
          BSTR sFIdList
          )
          
          주문전송 후 주문접수, 체결통보, 잔고통보를 수신할 때 마다 발생됩니다.
          GetChejanData()함수를 이용해서 FID항목별 값을 얻을수 있습니다.
          ]]>
          </function>
          <function type="event" id="3" name="void OnReceiveMsg(BSTR sScrNo, BSTR sRQName, BSTR sTrCode, BSTR sMsg)" >
          <![CDATA[
          [OnReceiveMsg() 이벤트]
          
          OnReceiveMsg(
          BSTR sScrNo,   // 화면번호
          BSTR sRQName,  // 사용자 구분명
          BSTR sTrCode,  // TR이름
          BSTR sMsg     // 서버에서 전달하는 메시지
          )
          
          서버통신 후 수신한 서버메시지를 알려줍니다.
          데이터 조회시 입력값(Input)오류, 주문 전송시 주문거부 사유 등을 확인할 수 있습니다.
          메시지에 포함된 6자리 코드번호는 변경될 수 있으니, 여기에 수신된 코드번호를 특정 용도로 사용하지 마시기 바랍니다.
          예) "조회가 완료되었습니다" 
          예) "계좌번호 입력을 확인해주세요" 
          예) "조회할 자료가 없습니다." 
          예) "증거금 부족으로 주문이 거부되었습니다."
          ]]>
          
          </function>
          <function type="event" id="1" name="void OnReceiveTrData(BSTR sScrNo, BSTR sRQName, BSTR sTrCode, BSTR sRecordName, BSTR sPrevNext, LONG nDataLength, BSTR sErrorCode, BSTR sMessage, BSTR sSplmMsg)" >
          <![CDATA[
          [OnReceiveTrData() 이벤트]
          
          void OnReceiveTrData(
          BSTR sScrNo,       // 화면번호
          BSTR sRQName,      // 사용자 구분명
          BSTR sTrCode,      // TR이름
          BSTR sRecordName,  // 레코드 이름
          BSTR sPrevNext,    // 연속된 데이터 유무를 판단하는 값. 0: 연속(추가조회)데이터 없음, 2:연속(추가조회) 데이터 있음
          LONG nDataLength,  // 사용안함.
          BSTR sErrorCode,   // 사용안함.
          BSTR sMessage,     // 사용안함.
          BSTR sSplmMsg     // 사용안함.
          )
          
          조회데이터를 수신했을때 발생됩니다.
          또는 주문전송시 정상처리경우에 주문번호를 구할 수 있습니다.
          수신된 데이터는 이 이벤트에서 GetCommData()함수를 이용해서 얻어올 수 있습니다.
          ]]>
          </function>
        </subject>
        <!-- // 우선 막아둔다.
        <subject type="code" name="C++"><![CDATA[주문과 잔고처리 C++]]> </subject>
      <subject type="code" name="C#"><![CDATA[주문과 잔고처리 C#]]> </subject>
      <subject type="code" name="VB"><![CDATA[주문과 잔고처리 VB]]> </subject>
      -->
    </Content>
    <Content name="조건검색">
        <subject type="desc" name="기본설명"> <![CDATA[        
        [조건검색 개요]
        OpenAPI에서 제공하는 조건검색 기능은 영웅문4 HTS에서 작성/저장된 조건식을 불러와 사용하는 방식입니다.
        조건검색 수식작성이나 조건식 편집 및 저장은 OpenAPI에서 지원하지 않습니다.
        영웅문4 HTS를 통해 편집/저장된 사용자 조건식만 사용 가능합니다.
        
        조건검색 전용 함수와 이벤트가 제공됩니다.
        이를 이용해서 조건검색과 실시간 조건검색을 사용할 수 있습니다.
        ※ 조건검색 요청을 반복하는 방법이 아닌, 실시간 조건검색 사용을 권장합니다.
        ※ 서버에서 실시간조건검색 준비가 완료되는 시점은 07:30 입니다. 
                SendCondition 조건검색 요청은 07:30 이후에 사용해주시기 바랍니다.
        ※ 실시간으로 편입되는 종목이 순간적으로 편입/이탈을 반복하는 경우, 서버에따라 결과가 일시적으로 HTS 등과 다를 수 있습니다.

        
        [조건검색 사용법]
        접속(로그인) 후 GetConditionLoad() 함수를 호출하여 영웅문4를 통해 
        서버에 저장되어 있는 '내조건식' 들을 요청합니다.
        이에대한 응답으로 OnReceiveConditionVer() 이벤트가 발생합니다.
        OnReceiveConditionVer() 이벤트 안에서 GetConditionNameList() 함수를 사용하여
        '내조건식' 리스트를 얻습니다.
		
        이중 원하는 조건식으로 조건검색 요청 함수 SendCondition() 를 호출합니다.
        이에대한 서버의 응답은 OnReceiveTrCondition() 이벤트로 수신됩니다.
        실시간 옵션으로 요청한 경우 해당 조건식에 실시간으로 편입/이탈 되는 종목은
        OnReceiveRealCondition() 이벤트로 수신됩니다.
		
        ※ GetConditionNameList 로 구한 조건식 이름과 조건식의 고유 번호를 
            SendCondition 함수 사용시 정확하게 입력해야 합니다.
			
        GetConditionLoad (사용자 호출) -> OnReceiveConditionVer (이벤트 발생) -> GetConditionNameList (사용자 호출)
          -> SendCondition (사용자 호출) -> OnReceiveTrCondition (이벤트 발생) -> OnReceiveRealCondition (이벤트 발생)


        [조건검색 제한]
        조건검색 요청은 1초당 5회 조회횟수 제한에 포함됩니다.
        동일 조건식에 대한 조건검색 요청은 1분에 1회로 제한됩니다.
        조건검색 결과가 100종목을 넘게 되면 해당조건은 실시간 조건검색 신호를 수신할 수 없습니다.
        실시간 조건검색은 최대 10개까지 사용 가능합니다.
        ※ 조건검색 제한에대한 자세한 내용은 하단에 추가합니다.


        10개 조건검색식을 한번에 모두 조회하는 프로그램이 있으며 조건검색만 요청한다고 가정해서 설명하면 다음과 같습니다.
        
        ------------------------------------------------------------------------------------------------------------------------------------
        
        첫번째 제한조건 : 1초에 5회만 조회가능
        두번째 제한조건 : 조건별 1분당 1회로 제한(실시간 조건검색 수신에는 영향없음)
        
        09:00:00  조회 시작
        1번부터 5번 조건식은 조회성공(첫번째 제한조건, 두번째 제한조건 모두 만족)
        6번부터 10번 조건식은 조회실패(첫번째 제한조건)
        
        09:00:01 조회 재시작(1초후 재조회)
        1번부터 5번 조건식은 조회실패(두번째 제한조건)
        6번부터 10번 조건식은 조회성공(첫번째 제한조건, 두번째 제한조건 모두 만족)
        ... ... ...
        
        09:01:00 조회시작 (첫조회 1분후)
        1번부터 5번 조건식은 조회성공(첫번째 제한조건, 두번째 제한조건 모두 만족)
        6번부터 10번 조건식은 조회실패(첫번째 제한조건)
        
        09:00:01 조회 재시작(1분 1초후 재조회)
        1번부터 5번 조건식은 조회실패(두번째 제한조건)
        6번부터 10번 조건식은 조회성공(첫번째 제한조건, 두번째 제한조건 모두 만족)
        
        ------------------------------------------------------------------------------------------------------------------------------------
        
        
        ]]> </subject>
        <subject name="관련함수" type="function decs" >
          <function type="funct" id="52" name="long GetConditionLoad()" >
          <![CDATA[
          [GetConditionLoad() 함수]
          
          서버에 저장된 사용자 조건검색 목록을 요청합니다. 
          조건검색 목록을 모두 수신하면 OnReceiveConditionVer()이벤트가 발생됩니다.
          조건검색 목록 요청을 성공하면 1, 아니면 0을 리턴합니다.
          ]]>
          </function>
          <function type="funct" id="53" name="BSTR GetConditionNameList()" >
          <![CDATA[
          [GetConditionNameList() 함수]
          
          서버에서 수신한 사용자 조건식을 조건식의 고유번호와 조건식 이름을 한 쌍으로 하는 문자열들로 전달합니다.
          조건식 하나는 조건식의 고유번호와 조건식 이름이 구분자 '^'로 나뉘어져 있으며 각 조건식은 ';'로 나뉘어져 있습니다.
          이 함수는 OnReceiveConditionVer()이벤트에서 사용해야 합니다.
		  
          예) "1^내조건식1;2^내조건식2;5^내조건식3;,,,,,,,,,,"
          ]]>
          </function>
          <function type="funct" id="54" name="long SendCondition(BSTR strScrNo, BSTR strConditionName, int nIndex, int nSearch)" >
          <![CDATA[
          [SendCondition() 함수]
          
          SendCondition(
          BSTR strScrNo,    // 화면번호
          BSTR strConditionName,  // 조건식 이름
          int nIndex,     // 조건식 고유번호
          int nSearch   // 실시간옵션. 0:조건검색만, 1:조건검색+실시간 조건검색
          )
          
          서버에 조건검색을 요청하는 함수입니다.
          마지막 인자값으로 조건검색만 할것인지 실시간 조건검색도 수신할 것인지를 지정할 수 있습니다.
          GetConditionNameList()함수로 얻은 조건식 이름과 고유번호의 쌍을 맞춰서 사용해야 합니다.
          리턴값 1이면 성공이며, 0이면 실패입니다.
          요청한 조건식이 없거나 조건 고유번호와 조건명이 서로 안맞거나 조회횟수를 초과하는 경우 실패하게 됩니다.
          
          ------------------------------------------------------------------------------------------------------------------------------------
          
          [조건검색 사용예시]
          GetConditionNameList()함수로 얻은 조건식 목록이 "0^조건식1;3^조건식1;8^조건식3;23^조건식5"일때 조건식3을 검색
          
          long lRet = SendCondition("0156", "조건식3", 8, 1);
          
          ------------------------------------------------------------------------------------------------------------------------------------
          ]]>
          </function>
          <function type="funct" id="55" name="void SendConditionStop(BSTR strScrNo, BSTR strConditionName, int nIndex)" >
          <![CDATA[
          [SendConditionStop() 함수]
          
          SendConditionStop(
          BSTR strScrNo,    // 화면번호
          BSTR strConditionName,    // 조건식 이름 
          int nIndex    // 조건식 고유번호
          )
          
          실시간 조건검색을 중지할 때 사용하는 함수입니다.
          조건식 조회할때 얻는 조건식 이름과 고유번호의 쌍을 맞춰서 사용해야 합니다.
          
          ]]>
          </function>
          <function type="funct" id="51" name="LONG SetRealReg(BSTR strScreenNo, BSTR strCodeList, BSTR strFidList, BSTR strOptType)" >
          <![CDATA[
          [SetRealReg() 함수]
          
          SetRealReg(
          BSTR strScreenNo,   // 화면번호
          BSTR strCodeList,   // 종목코드 리스트
          BSTR strFidList,  // 실시간 FID리스트
          BSTR strOptType   // 실시간 등록 타입, 0또는 1
          )
          
          종목코드와 FID 리스트를 이용해서 실시간 시세를 등록하는 함수입니다.
          한번에 등록가능한 종목과 FID갯수는 100종목, 100개 입니다.
          실시간 등록타입을 0으로 설정하면 등록한 종목들은 실시간 해지되고 등록한 종목만 실시간 시세가 등록됩니다.
          실시간 등록타입을 1로 설정하면 먼저 등록한 종목들과 함께 실시간 시세가 등록됩니다
          
          ------------------------------------------------------------------------------------------------------------------------------------
          
          [실시간 시세등록 예시]
          OpenAPI.SetRealReg(_T("0150"), _T("039490"), _T("9001;302;10;11;25;12;13"), "0");  // 039490종목만 실시간 등록
          OpenAPI.SetRealReg(_T("0150"), _T("000660"), _T("9001;302;10;11;25;12;13"), "1");  // 000660 종목을 실시간 추가등록
          
          ------------------------------------------------------------------------------------------------------------------------------------
          ]]>
          </function>
          <function type="funct" id="57" name="void SetRealRemove(BSTR strScrNo, BSTR strDelCode)" >
          <![CDATA[
          [SetRealRemove() 함수]
          
          SetRealRemove(
          BSTR strScrNo,    // 화면번호 또는 ALL
          BSTR strDelCode   // 종목코드 또는 ALL
          )
          
          실시간시세 해지 함수이며 화면번호와 종목코드를 이용해서 상세하게 설정할 수 있습니다.
          ※ A종목에 대한 실시간이 여러화면번호로 중복등록되어 있는 경우 특정화면번호를 이용한
                  SetRealRemove() 함수호출시 A종목의 실시간시세는 해지되지 않습니다.
          
          ------------------------------------------------------------------------------------------------------------------------------------

          [실시간 시세해지 예시]
          OpenAPI.SetRealRemove("0150", "039490");  // "0150"화면에서 "039490"종목 실시간 해지
          OpenAPI.SetRealRemove("ALL", "ALL");  // 모든 화면에서 모든종목 실시간 해지
          OpenAPI.SetRealRemove("0150", "ALL");  // "0150"화면에서 모든종목 실시간 해지
          OpenAPI.SetRealRemove("ALL", "039490");  // 모든 화면에서 "039490"종목 실시간 해지
          
          ------------------------------------------------------------------------------------------------------------------------------------
          ]]>
          </function>
          <function type="event" id="9" name="void OnReceiveConditionVer(LONG lRet, BSTR sMsg)" >
          <![CDATA[
          [OnReceiveConditionVer() 이벤트]
          
          OnReceiveConditionVer(
          LONG lRet, // 호출 성공여부, 1: 성공, 나머지 실패
          BSTR sMsg  // 호출결과 메시지
          )
          
          저장된 사용자 조건식 불러오기 요청에 대한 응답 수신시 발생되는 이벤트입니다.
          
          ------------------------------------------------------------------------------------------------------------------------------------
          
          [사용자 조건식 호출결과 수신예시]
          OnReceiveConditionVer(long lRet, LPCTSTR sMsg)
          {
              if(lRet != 0) return;
              
              CString		strCondList(m_KOA.GetConditionNameList());
              CString		strOneCond, strItemID, strCondName;
              while(AfxExtractSubString(strOneCond, strCondList, nIndex++, _T(';')))  // 조건식을 하나씩 분리한다.
              {
                  if(strOneCond.IsEmpty())	continue;
                  AfxExtractSubString(strItemID	, strOneCond, 0, _T('^'));  // 고유번호를 분리한다.
                  AfxExtractSubString(strCondName	, strOneCond, 1, _T('^'));  // 조건식 이름을 분리한다.
              }
          }
          
          ------------------------------------------------------------------------------------------------------------------------------------
          
          ]]>
          </function>
          <function type="event" id="8" name="void OnReceiveTrCondition(BSTR sScrNo, BSTR strCodeList, BSTR strConditionName, int nIndex, int nNext)" >
          <![CDATA[
          [OnReceiveTrCondition() 이벤트]
          
          OnReceiveTrCondition(
          BSTR sScrNo,    // 화면번호
          BSTR strCodeList,   // 종목코드 리스트
          BSTR strConditionName,    // 조건식 이름
          int nIndex,   // 조건 고유번호
          int nNext   // 연속조회 여부
          )
          
          조건검색 요청에대한 서버 응답 수신시 발생하는 이벤트입니다. 
          종목코드 리스트는 각 종목코드가 ';'로 구분되서 전달됩니다.
		  
          
          ------------------------------------------------------------------------------------------------------------------------------------
          
          [조건검색 결과 수신예시]
          OnReceiveTrCondition(LPCTSTR sScrNo,LPCTSTR strCodeList, LPCTSTR strConditionName, int nIndex, int nNext)
          {
              if(strCodeList == "") return;
              CString strCode, strCodeName;
              int   nIdx = 0;
              while(AfxExtractSubString(strCode, strCodeList, nIdx++, _T(';')))// 하나씩 종목코드를 분리
              {
                  if(strCode == _T("")) continue;
                  strCodeName = OpenAPI.GetMasterCodeName(strCode); // 종목명을 가져온다.
              }
          }
          
          ------------------------------------------------------------------------------------------------------------------------------------
          ]]>
          </function>
          <function type="event" id="7" name="void OnReceiveRealCondition(BSTR strCode, BSTR strType, BSTR strConditionName, BSTR strConditionIndex)" >
          <![CDATA[
          [OnReceiveRealCondition() 이벤트]
          
          OnReceiveRealCondition(
          BSTR strCode,   // 종목코드
          BSTR strType,   //  이벤트 종류, "I":종목편입, "D", 종목이탈
          BSTR strConditionName,    // 조건식 이름 
          BSTR strConditionIndex    // 조건식 고유번호
          )
          
          실시간 조건검색 요청으로 신규종목이 편입되거나 기존 종목이 이탈될때 마다 발생됩니다.
          ※ 편입되었다가 순간적으로 다시 이탈되는 종목에대한 신호는 조건검색 서버마다 차이가 발생할 수 있습니다.

          ------------------------------------------------------------------------------------------------------------------------------------
          
          [실시간 조건검색 수신예시]
          OnReceiveRealCondition(LPCTSTR sCode, LPCTSTR sType, LPCTSTR strConditionName, LPCTSTR strConditionIndex)
          {
              CString strCode(sCode), strCodeName;
              int   nIdx = 0;
              CString strType(sType);
              if(strType == _T("I"))// 종목편입
              {
                strCodeName = OpenAPI.GetMasterCodeName(strCode); // 종목명을 가져온다.
                long lRet = OpenAPI.SetRealReg(strSavedScreenNo, strCode, _T("9001;302;10;11;25;12;13"), "1");// 실시간 시세등록
              }
              else if(strType == _T("D")) // 종목이탈
              {
                OpenAPI.SetRealRemove(strSavedScreenNo, strCode);// 실시간 시세해지
              }
          }
          
          ------------------------------------------------------------------------------------------------------------------------------------
          
          ]]>
          </function>
        </subject>
        <!-- // 우선 막아둔다.
        <subject type="code" name="C++"><![CDATA[조건검색 C++]]> </subject>
      <subject type="code" name="C#"><![CDATA[조건검색 C#]]> </subject>
      <subject type="code" name="VB"><![CDATA[조건검색 VB]]> </subject>
      -->
    </Content>
    <Content name="기타함수">
      <subject type="function decs" name="종목정보관련 함수">
        <function type="funct" id="14" name="BSTR GetCodeListByMarket(BSTR sMarket)" >
          <![CDATA[
          [GetCodeListByMarket() 함수]
          
          GetCodeListByMarket(
          BSTR sMarket    // 시장구분값
          )
          
          주식 시장별 종목코드 리스트를 ';'로 구분해서 전달합니다. 
          시장구분값을 ""공백으로하면 전체시장 코드리스트를 전달합니다.
          
          로그인 한 후에 사용할 수 있는 함수입니다.
          
          [시장구분값]
          0 : 코스피
          10 : 코스닥
          3 : ELW
          8 : ETF
          50 : KONEX
          4 :  뮤추얼펀드
          5 : 신주인수권
          6 : 리츠
          9 : 하이얼펀드
          30 : K-OTC
          
          ]]>
          </function>
        <function type="funct" id="16" name="BSTR GetMasterCodeName(BSTR strCode)" >
          <![CDATA[
          [GetMasterCodeName() 함수]
          
          GetMasterCodeName(
          BSTR strCode    // 종목코드
          )
          
          종목코드에 해당하는 종목명을 전달합니다.
          
          로그인 한 후에 사용할 수 있는 함수입니다.
          ]]>
          </function>
        <function type="funct" id="17" name="LONG GetMasterListedStockCnt(BSTR strCode)" >
          <![CDATA[
          [GetMasterListedStockCnt() 함수]
          
          GetMasterListedStockCnt(
          BSTR strCode  // 종목코드
          )
          
          입력한 종목코드에 해당하는 종목 상장주식수를 전달합니다.
          
          로그인 한 후에 사용할 수 있는 함수입니다.
          ]]>
          </function>
        <function type="funct" id="18" name="BSTR GetMasterConstruction(BSTR strCode)" >
          <![CDATA[
          [GetMasterConstruction() 함수]
          
          GetMasterConstruction(
          BSTR strCode  // 종목코드
          }
          
          입력한 종목코드에 해당하는 종목의 감리구분을 전달합니다.
          (정상, 투자주의, 투자경고, 투자위험, 투자주의환기종목)
          
          로그인 한 후에 사용할 수 있는 함수입니다.
          ]]>
          </function>
        <function type="funct" id="19" name="BSTR GetMasterListedStockDate(BSTR strCode)" >
          <![CDATA[
          [GetMasterListedStockDate() 함수]
          
          GetMasterListedStockDate(
          BSTR strCode    // 종목코드
          )
          
          입력한 종목의 상장일을 전달합니다.
          
          로그인 한 후에 사용할 수 있는 함수입니다.
          
          ]]>
          </function>
        <function type="funct" id="20" name="BSTR GetMasterLastPrice(BSTR strCode)" >
          <![CDATA[
          [GetMasterLastPrice() 함수]
          
          GetMasterLastPrice(
          BSTR strCode    // 종목코드
          )
          
          입력한 종목의 전일종가를 전달합니다.
          
          로그인 한 후에 사용할 수 있는 함수입니다.
          ]]>
          </function>
        <function type="funct" id="21" name="BSTR GetMasterStockState(BSTR strCode)" >
          <![CDATA[
          [GetMasterStockState() 함수]
          
          GetMasterStockState(
          BSTR strCode  // 종목코드
          )
          
          입력한 종목의 증거금 비율, 거래정지, 관리종목, 감리종목, 투자융의종목, 담보대출, 액면분할, 신용가능 여부를 전달합니다.
          
          로그인 한 후에 사용할 수 있는 함수입니다.
          ]]>
          </function>
		  <function type="funct" id="22" name="BSTR GetBranchCodeName()" >
          <![CDATA[
          [GetBranchCodeName() 함수]
                  
          특정TR 조회에 필요한 회원사 정보를 회원사 코드와 회원사 이름으로 구성해서 전달합니다.
          각 회원사 정보는 구분자 ';'로 분리되어 있으며 한 회원사 정보에는 구분자 '|'로 회원사 코드와 회원사 이름을 분리합니다.
          전체적인 회원사 구성과 함수에서 전달받은 회원사 정보는 다음과 같습니다.
          
          "회원사코드0|회원사이름0;회원사코드1|회원사이름1;...회원사코드n|회원사이름n;"
          예) 001|교  보;002|신한금융투자;003|한국투자증권;...;827|모아증권중개;829|동양오리온
          
          로그인 한 후에 사용할 수 있는 함수입니다.
          ]]>
          </function>
        <function type="funct" id="29" name="BSTR GetFutureList()" >
          <![CDATA[
          [GetFutureList() 함수]
          
          지수선물 종목코드 리스트를 ';'로 구분해서 전달합니다.
          
          로그인 한 후에 사용할 수 있는 함수입니다.
          ]]>
          </function>
          <!-- 이 함수는 잘못 만들어졌다.
        <function type="funct" id="30" name="BSTR GetFutureCodeByIndex(int nIndex)" >
          <![CDATA[
          [GetFutureCodeByIndex() 함수]
          
          GetFutureCodeByIndex(
          int nIndex  // 인덱스 0 ~ 
          )
          
          인덱스로 지정한 지수선물 코드를 반환합니다.
          로그인 한 후에 사용할 수 있는 함수입니다.
          ]]>
          </function>
          -->
        <function type="funct" id="31" name="BSTR GetActPriceList()" >
          <![CDATA[
          [GetActPriceList() 함수]
          
          지수옵션 행사가에 100을 곱해서 소수점이 없는 값을 ';'로 구분해서 전달합니다.
          
          로그인 한 후에 사용할 수 있는 함수입니다.
          
          ------------------------------------------------------------------------------------------------------------------------------------
          
          [지수옵션 행사가 사용예시]
          CString strActPriceList(OpenAPI.GetActPriceList());
          "19000;19250;19500;19750;20000;20250;20500;20750;21000;21250;21500;21750;..."
          
          ------------------------------------------------------------------------------------------------------------------------------------
          ]]>
          </function>
          
        <function type="funct" id="32" name="BSTR GetMonthList()" >
          <![CDATA[
          [GetMonthList() 함수]
          
          지수옵션 월물정보를 ';'로 구분해서 전달하는데 순서는 콜 11월물 ~ 콜 최근월물 풋 최근월물 ~ 풋 최근월물가 됩니다.
          
          로그인 한 후에 사용할 수 있는 함수입니다.
          
          ------------------------------------------------------------------------------------------------------------------------------------
          
          [지수옵션 월물조회 사용예시]
          CString strMonthList(OpenAPI.GetMonthList());
          "201812;201806;201712;201706;201703;201612;201611;201610;201609;201608;201607;..."
          
          ------------------------------------------------------------------------------------------------------------------------------------
          ]]>
          </function>
        <function type="funct" id="33" name="BSTR GetOptionCode(BSTR strActPrice, int nCp, BSTR strMonth)" >
          <![CDATA[
          [GetOptionCode() 함수]
          
          GetOptionCode(
          BSTR strActPrice,   // 소수점을 포함한 행사가
          int nCp,    // 콜풋구분값, 콜:2, 풋:3
          BSTR strMonth   // 6자리 월물
          )
          
          인자로 지정한 지수옵션 코드를 전달합니다.
          
          로그인 한 후에 사용할 수 있는 함수입니다.
          
          ------------------------------------------------------------------------------------------------------------------------------------
          
          [지수옵션 코드 사용예시]
          
          CString strOptCode = OpenAPI.GetOptionCode(_T("247.50"), 2, _T("201607"));
          
          ------------------------------------------------------------------------------------------------------------------------------------
          ]]>
          </function>
          <function type="funct" id="44" name="BSTR GetOptionATM()" >
          <![CDATA[
          [GetOptionATM() 함수]
          
          지수옵션 소수점을 제거한 ATM값을 전달합니다. 
          예를들어 ATM값이 247.50 인 경우 24750이 전달됩니다.
          
          로그인 한 후에 사용할 수 있는 함수입니다.
          ]]>
          </function>
          <function type="funct" id="36" name="BSTR GetSFutureList(LPCTSTR strBaseAssetGb)" >
          <![CDATA[
          [GetSFutureList() 함수]
          
          GetSFutureList(
          BSTR strBaseAssetGb,   // 기초자산 구분값
          )
          
          기초자산 구분값을 인자로 받아서 주식선물 종목코드, 종목명, 기초자산이름을 구할수 있습니다.
          입력값을 공백으로 하면 주식선물 전체 종목코드를 얻을 수 있습니다.
          전달되는 데이터 형식은 다음과 같습니다.
         "종목코드1^종목명1^기초자산이름1;종목코드2^종목명2^기초자산이름2;...;종목코드n^종목명n^기초자산이름n;"
          
          로그인 한 후에 사용할 수 있는 함수입니다.
          ]]>
          </function>
      </subject>
      <subject type="function decs" name="특수함수">
        <function type="funct" id="49" name="BSTR KOA_Functions(BSTR sFunctionName, BSTR sParam))" >
          <![CDATA[
          [KOA_Functions() 함수]
          
          KOA_Functions(
          BSTR sFunctionName,   // 함수이름 혹은 기능이름
          BSTR sParam   // 함수 매개변수
          ))
          
          KOA_Function() 함수는 OpenAPI기본 기능외에 기능을 사용하기 쉽도록 만든 함수입니다.
          두 개의 인자값을 사용합니다. 
          
          ------------------------------------------------------------------------------------------------------------------------------------
          
          [KOA_Functions() 함수 사용예시]
          
          1. 계좌비밀번호 입력창 출력
          OpenAPI.KOA_Functions(_T("ShowAccountWindow"), _T(""));// 계좌비밀번호 입력창을 출력한다.
          
		  
          2. 접속서버확인
          OpenAPI.KOA_Functions(_T("GetServerGubun"), _T(""));// 접속서버 구분을 알려준다. 1 : 모의투자 접속, 나머지 : 실서버 접속 
          
		  
          3. 주식종목 시장구분, 종목분류등 정보제공 
          OpenAPI.KOA_Functions(_T("GetMasterStockInfo"), _T("039490"));
          호출결과는 입력한 종목에 대한 대분류, 중분류, 업종구분값을 구분자로 연결한 문자열입니다.
          구분자는 '|'와 ';'입니다.
          예)
          OpenAPI.KOA_Functions("GetMasterStockInfo", "039490")을 호출하면 
          시장구분0|거래소;시장구분1|중형주;업종구분|금융업; 이렇게 결과를 얻을 수 있습니다. 
          
		  
          4. 조검검색 종목코드와 현재가 수신(실시간 조건검색은 사용할수 없음)
          조건검색결과에 종목코드와 그 종목의 현재가를 함께 수신하는 방법이며 실시간 조건검색에서는 사용할 수 없고 오직 조건검색에만 사용할수 있습니다.
          OpenAPI.KOA_Functions(_T("SetConditionSearchFlag"), _T("AddPrice")); // 현재가 포함하도록 설정 
          현재가 포함으로 설정시 OnReceiveTrCondition()이벤트에 "종목코드1^현재가1;종목코드2^현재가2;...종목코드n^현재가n"형식으로 전달됨
          
          OpenAPI.KOA_Functions(_T("SetConditionSearchFlag"), _T("DelPrice")); // 현재가 미포함 (원래상태로 전환)
          현재가 미포함시 기존처럼 "종목코드1^종목코드2...종목코드n" 형식으로 전달므로 설정에 따라 수신데이터 처리방법이 달라져야 하므로 주의하셔야 합니다
          이 방법은 실시간 조건검색에서는 사용할 수 없고 수신데이터에 현재가가 포함되므로 데이터처리방법을 달리해야 합니다
          
		  
          5. 업종코드목록 획득
          OpenAPI.KOA_Functions(_T("GetUpjongCode"), _T("0")); // 업종코드요청
          두 번째 인자로 사용할 수 있는 값은 0,1,2,4,7 입니다.
          0:코스피, 1: 코스닥, 2:KOSPI200, 4:KOSPI100(KOSPI50), 7:KRX100
          함수반환값은 "시장구분값,업종코드,업종명|시장구분값,업종코드,업종명|...|시장구분값,업종코드,업종명" 형식입니다.
          즉 하나의 업종코드는 입력한 시장구분값과 업종코드 그리고 그 업종명이 쉼표(,)로 구분되며 각 업종코드는 '|'로 구분됩니다.


          6. 업종이름 획득
          OpenAPI.KOA_Functions(_T("GetUpjongNameByCode"), _T("업종코드입력"));


          7. ETF 투자유의 종목 여부 (2020/9/17 적용)
          거래소 제도개선으로 ETF/ETN 종목 중 투자유의 종목을 매수주문하는 경우 경고 메세지 창이 출력되도록 기능이 추가 되었습니다.
          (경고 창 출력 시 주문을 중지/전송 선택 가능합니다.)
          주문 함수를 호출하기 전에 특정 종목이 투자유의종목인지 아래와 같은 방법으로 확인할 수 있습니다.
		  
          KOA_Functions("IsOrderWarningETF", "종목코드(6자리)")
          투자유의 종목인 경우 "1" 값이 리턴, 그렇지 않은 경우 "0" 값 리턴. (ETF가 아닌 종목을 입력시 "0" 값 리턴.)


          8. 주식 전종목대상 투자유의 종목 여부 (2020/11/26 적용)
          거래소 제도개선으로 주식 종목 중 정리매매/단기과열/투자위험/투자경고 종목을 매수주문하는 경우
          경고 메세지 창이 출력되도록 기능이 추가 되었습니다.
          (경고 창 출력 시 주문을 중지/전송 선택 가능합니다.)
          주문 함수를 호출하기 전에 특정 종목이 투자유의종목인지 아래와 같은 방법으로 확인할 수 있습니다.

          KOA_Functions("IsOrderWarningStock", "종목코드(6자리)")
          리턴 값 - "0":해당없음, "2":정리매매, "3":단기과열, "4":투자위험, "5":투자경고 

          ------------------------------------------------------------------------------------------------------------------------------------
          ]]>
          </function>
      </subject>
    </Content>
    <Content name="OpenAPI 사용제한">
      <subject name="기본설명" type="desc">
          <![CDATA[
          ------------------------------------------------------------------------------------------------------------------------------------
          
          OpenAPI는 안정적인 서비스 운영을 위해 몇가지 제한을 두고 있습니다.
          이는 과도하게 반복적으로 데이터를 요청하는 등 특정 사용자에의해 서버가 점유되면서, 
          그렇지 않은 다수의 사용자가 이에 악영향을 받을 수 있는 점을 방지하기 위함입니다.
          프로그램 구현시에 주의해주시기 바랍니다.
          
          ------------------------------------------------------------------------------------------------------------------------------------
		  
          [실행환경]
          OpenAPI는 서버급 OS를 지원하지 않습니다.
          또한, 한글외 타언어 OS에서 구동시 정상적으로 동작하지 않을 수 있습니다.


          [개발환경]
          OpenAPI는 64비트용으로 제공되지 않습니다.
          64비트 MS Office 군의 엑셀에서는 OpenAPI 컨트롤 사용이 불가 합니다.


          [접속제한]
          서버점검시간은 매일 05:00 에 시작되며 보통 1분, 길어지면 5분정도 소요됩니다.
          이 시간에는 접속자체가 불가하며 이전에 접속되어 있는 경우 접속이 단절됩니다.
          조건검색 조회는 07:30 부터 가능합니다.
          따라서 07:30 이후에 OpenAPI 접속하시길 권장 드립니다.
		  
          주말 시스템 작업시 접속이 불가한 경우가 있습니다.
          주말 접속이 되지 않는 경우 OpenAPI게시판 공지 또는 고객게시판 공지를 확인해보시기 바랍니다.


          [조회횟수 제한]
          데이터 조회는 1초당 5회로 제한됩니다.
          CommRqData(데이터 조회요청), SendCondition(조건검색 조회요청), CommKwRqData(복수종목 조회요청) 들이 해당됩니다.
          1초당 5회를 초과하는 데이터요청에대해서는 에러코드가 리턴됩니다.
          재실행/재접속 없이 1초 후 자동으로 해제됩니다.
      
	  
          [서버부하방지 제한]
          기존 1초당 5회 조회횟수 제한과 별개로 "서버부하방지 제한"이 추가되었습니다. (2017년 4월 6일)
          특정 고객에의해 서버부하 현상이 반복되면서 보다 안정적인 OpenAPI 서비스 제공을 위한 추가정책입니다.
          CommRqData(데이터 조회요청), SendCondition(조건검색 조회요청), CommKwRqData(복수종목 조회요청) 들이 해당됩니다.
          서버의 상황에따라 유동적일 수 있어서 초당 5회와 같이 명확한 기준을 알려드리기 어려운 점 양해 부탁드립니다.
          서버부하방지 제한에 적용되는 경우에는 메세지박스가 출력되며 데이터요청이 불가해집니다.
          프로그램 종료 후 재접속으로 해지할 수 있습니다.
          (OpenAPI 게시판 조회제한 관련 공지내용 참고.)
      
	  
          [주문횟수 제한]
          OpenAPI를 통한 주문은 1초당 5회로 제한됩니다.
          SendOrder(주식주문), SendOrderFO(파생주문), SendOrderCredit(신용주문) 들이 해당됩니다.
          1초당 5회를 초과하는 주문전송에대해서는 에러코드가 리턴됩니다.
          ※ 위 조회횟수 제한과 주문횟수 제한은 별개로 각각 카운트 됩니다.
	  
	  
          [실시간 데이터 제한]
          하나의 화면번호에 실시간시세를 등록할 수 있는 최대 종목수는 100종목 입니다.
          이외 실시간 데이터를 수신하는데에는 제한이 없습니다.
          ※ 너무 많은 종목의 시세를 수신하는 것은 사용자PC(CPU, 메모리, 네트워크)의 부하를 일으킬 수 있습니다.
              이때 사용자PC상 시세 데이터처리에 지연현상이 일어날 수 있습니다.
              또한 수신되는 실시간시세를 모두 파일에 기록하는 처리 로직은 PC부하를 일으키는 요인이 됩니다.
              (특히, 엑셀로 구현하는 경우 부하 현상이 심할 수 있습니다.)
              이는 사용자의 PC환경에따라, 실시간 처리 로직에따라 다르므로 
              작업관리자창을 띄워서 PC부하정도를 모니터링 하는 등 테스트 하여 
              사용에 무리가 없는 정도의 종목 수를 구현, 운영하시기 바랍니다.
		  
		  
          [제공되지 않는 서비스]
          - OpenAPI에서는 조건식 편집 및 저장이 불가 합니다. 영웅문4를 통해 편집/저장 하시기 바랍니다.
          - 차트데이터 조회시 이동평균을 포함한 지표데이터는 제공되지 않습니다.
          - OpenAPI는 이체등 증권업무를 제공하지 않습니다.
          - OpenAPI는 윈도우 서버군 OS를 지원하지 않습니다.
          - OpenAPI는 한글 외 언어 OS를 지원하지 않습니다.
          - OpenAPI는 HTS, MTS등 다른 매체에서 사용되는 관심종목 연동을 지원하지 않습니다.
          - OpenAPI는 64비트용 컨트롤로 제공되지 않습니다.


          [백신 프로그램에 의한 실행 차단]
          PC에 설치된 avast, 네이버백신, 다음클리너 등의 백신 프로그램이 OpenAPI로 제작된 고객님의 프로그램 실행을 차단할 수 있습니다.
          차단으로 인해 실행이 안되는 경우 PC에 설치된 백신프로그램의 환경설정 및 차단된 프로그램 목록을 참고해보시기 바랍니다.
          avast 백신에의한 실행차단의 경우 아래와 같은 방법으로 해결하시기 바랍니다.
          1. 시스템 트레이 영역의 avast 아이콘 위에서 마우스 우측버튼을 클릭하고, “avast! 열기”를 실행
          2. 오른쪽 상단 "환경 설정” 클릭
          3. 왼쪽 “전역 예외” 탭 선택 -> 파일경로 “검색”버튼 클릭 -> c:\OpenApi 선택 -> “추가”버튼 클릭 -> “확인” 버튼 클릭

		  
          ]]>
      </subject>
    </Content>
    <Content name="OpenAPI 오류코드">
      <subject name="기본설명" type="desc">
          <![CDATA[
          ------------------------------------------------------------------------------------------------------------------------------------
          
          OpenAPI는 각 함수에서 리턴값으로 함수성공여부를 판단할 수 있습니다.
          함수에따라 리턴값이 0 또는 1일때 함수 정상호출 이며, 0보다 작은 값은 에러를 나타냅니다.
          주요 에러코드는 -200번(시세과부하), -308번(주문전송 과부하)입니다.
          ※ 함수호출이 0 또는 1로 정상호출인 경우에도 서버에서 에러처리가 될 수 있습니다.
                이 경우 OnReceiveMsg() 이벤트에서 서버의 에러메세지를 확인할 수 있습니다.
          
          ------------------------------------------------------------------------------------------------------------------------------------
              1         // 정상처리                                                                    
              0         // 정상처리                                                                    
            -10        // 실패
            -11        // 조건번호 없슴                                                                
            -12        // 조건번호와 조건식 불일치                                                     
            -13        // 조건검색 조회요청 초과                                                       
          -100        // 사용자정보교환 실패                                                           
          -101        // 서버 접속 실패                                                                
          -102        // 버전처리 실패                                                                 
          -103        // 개인방화벽 실패                                                               
          -104        // 메모리 보호실패                                                               
          -105        // 함수입력값 오류                                                               
          -106        // 통신연결 종료                                                                 
          -107        // 보안모듈 오류                                                                 
          -108        // 공인인증 로그인 필요                                                          
                                                                                                    
          -200        // 시세조회 과부하                                                               
          -201        // 전문작성 초기화 실패.                                                         
          -202        // 전문작성 입력값 오류.                                                         
          -203        // 데이터 없음.                                                                  
          -204        // 조회가능한 종목수 초과. 한번에 조회 가능한 종목개수는 최대 100종목.           
          -205        // 데이터 수신 실패                                                              
          -206        // 조회가능한 FID수 초과. 한번에 조회 가능한 FID개수는 최대 100개.               
          -207        // 실시간 해제오류                                                               
          -209        // 시세조회제한                                                               
                                                                                                    
          -300        // 입력값 오류                                                                   
          -301        // 계좌비밀번호 없음.                                                            
          -302        // 타인계좌 사용오류.                                                            
          -303        // 주문가격이 주문착오 금액기준 초과.                                                     
          -304        // 주문가격이 주문착오 금액기준 초과.                                                     
          -305        // 주문수량이 총발행주수의 1% 초과오류.                                          
          -306        // 주문수량은 총발행주수의 3% 초과오류.                                          
          -307        // 주문전송 실패                                                                 
          -308        // 주문전송 과부하                                                               
          -309        // 주문수량 300계약 초과.                                                        
          -310        // 주문수량 500계약 초과.                                                        
          -311        // 주문전송제한 과부하
          -340        // 계좌정보 없음.                                                                
          -500        // 종목코드 없음.                                                                

          ]]>
      </subject>
    </Content>
<Content name="모의투자">
      <subject name="기본설명" type="desc">
          <![CDATA[
          ------------------------------------------------------------------------------------------------------------------------------------
          
          OpenAPI는 영웅문4 HTS와 동일한 모의투자 시스템을 제공합니다.
          OpenAPI로 프로그램 개발시 모의투자에서 데이터검증 및 기능 테스트를 수행하시기 바랍니다.
		  
          모의투자 규정은 https://www.kiwoom.co.kr/nkw.templateFrameSet.do?m=m1101020000 에서 확인하실 수 있습니다.
		  
          모의투자 서버에서의 주문체결내역/계좌정보/잔고데이터에 대한 문의는 모의투자 게시판을 이용해주시기 바랍니다.
          모의투자 게시판 https://www.kiwoom.co.kr/nkw.templateFrameSet.do?m=m1101020000
          
          ------------------------------------------------------------------------------------------------------------------------------------

          [모의투자 주요 특징]
		  
          1. 상시 모의투자 신청
          OpenAPI 사용신청과 별개로 상시모의투자 사용신청 후에 사용하실 수 있습니다.
          사용신청 여부를 영웅문4 HTS와 공유합니다.

          2. 동일ID 중복 로그인
          모의투자 서버로 동일ID 중복 로그인이 제한됩니다.
          동일ID로 모의투자, 실거래서버 각각의 로그인은 가능 합니다.

          3. 서비스 제한
          모의투자에서는 특정 TR서비스 사용이 불가 합니다.
          이는 TR목록에서 확인 가능 합니다.
          또한 포트폴리오를 대상으로 하는 조건검색은 모의투자에서 불가 합니다.

          4. 수수료 차이
          실거래시 매수 매도 수수료는 각각 0.015%이며 
          모의투자의 수수료율은 0.35% 의 수수료로 계산됩니다

          5. 데이터 제공
          모의투자에서 제공하는 시세관련 (조회및 실시간시세, 조건검색, 차트) 데이터는 실거래서버 데이터와 동일한 데이터 입니다.
          이외 주문이나 계좌정보, 잔고 등의 데이터는 실거래서버와는 별개 입니다.
          따라서 데이터의 소숫점 표현등의 단위가 실거래서버의 데이터와 다를 수 있습니다. 
              (ex opw00004의 손익율, opw00018의 수익률 데이터 모의투자에서는 소숫점표현. 실거래서버는 소숫점표현 없음)
          ※ 주문체결 주의할 점 : 
              모의투자의 가상체결 시스템상 주문체결은 시세(호가)에 반영되지 않습니다.
		  
          ]]>
      </subject>
    </Content>	
</KOA_DevGuideList>